name: Build

on:
  workflow_call:
    inputs:
      platform:
        description: "windows or android."
        required: true
        type: string

      mihomo_asset_keyword:
        description: "Keyword to find the correct Mihomo core."
        required: true
        type: string

      mihomo_archive_type:
        description: "The archive type of the Mihomo core (zip or gz)"
        required: true
        type: string

    outputs:
      mihomo_version:
        description: "The clean version of Mihomo"
        value: ${{ jobs.build.outputs.mihomo_version }}

      zashboard_version:
        description: "The clean version of Zashboard"
        value: ${{ jobs.build.outputs.zashboard_version }}

      file_name:
        description: "The final generated zip file name"
        value: ${{ jobs.build.outputs.file_name }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      mihomo_version: ${{ steps.set_versions.outputs.mihomo_version }}
      zashboard_version: ${{ steps.set_versions.outputs.zashboard_version }}
      file_name: ${{ steps.set_versions.outputs.file_name }}

    env:
      MIHOMO_REPO: MetaCubeX/mihomo
      DASHBOARD_REPO: Zephyruso/zashboard

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create Directory Structure
        run: |
          if [[ "${{ inputs.platform }}" == "android" ]]; then
            mkdir -p staging-android/bin/xclash
            mkdir -p staging-android/clash
          else # Windows
            mkdir -p staging-windows
          fi

      - name: Copy files
        run: |
          if [[ "${{ inputs.platform }}" == "android" ]]; then
            TARGET_DIR="staging-android/clash"
          else
            TARGET_DIR="staging-windows"
          fi
          echo "Copying files to $TARGET_DIR/"

          if [ -d "custom-rules" ]; then
            cp -r custom-rules/ "$TARGET_DIR"/
          fi

          if [[ "${{ inputs.platform }}" == "windows" ]]; then
            find . -maxdepth 1 -type f \( -name "*.bat" -o -name "*.vbs" -o -name "*.xml" -o -name "*.yaml" \) -exec cp {} "$TARGET_DIR"/ \;
          else
            find . -maxdepth 1 -type f \( -name "*.yaml" \) -exec cp {} "$TARGET_DIR"/ \;
          fi
          echo "Files copied."

      - name: Create custom proxy file
        run: |
          if [[ "${{ inputs.platform }}" == "android" ]]; then
            TARGET_DIR="staging-android/clash/proxies"
          else
            TARGET_DIR="staging-windows/proxies"
          fi
          mkdir -p "$TARGET_DIR"
          cat <<'EOF' > "$TARGET_DIR/Local.yaml"
          proxies:
            - {name: ðŸ‡­ðŸ‡° HongKong Example, server: hongkong.server.example, port: 12345, type: ss, cipher: chacha20-ietf-poly1305, password: 123456789, udp: true}
          EOF

      - name: Download and extract Zashboard
        run: |
          if [[ "${{ inputs.platform }}" == "android" ]]; then
            TARGET_DIR="staging-android/clash/zashboard"
          else
            TARGET_DIR="staging-windows/zashboard"
          fi
          mkdir -p "$TARGET_DIR"

          curl -L https://github.com/Zephyruso/zashboard/archive/refs/heads/gh-pages.zip -o zashboard.zip
          unzip -q zashboard.zip -d staging_zashboard_temp/
          EXTRACTED_ZASHBOARD_DIR=$(ls staging_zashboard_temp/ | head -n 1)
          mv staging_zashboard_temp/$EXTRACTED_ZASHBOARD_DIR/* "$TARGET_DIR"/
          rm -rf staging_zashboard_temp/
          rm zashboard.zip

      - name: Process Mihomo and Set Versions
        id: set_versions
        run: |
          LATEST_MIHOMO_RELEASE_JSON=$(curl -s https://api.github.com/repos/${{ env.MIHOMO_REPO }}/releases/latest)
          MIHOMO_ASSET_INFO=$(echo "$LATEST_MIHOMO_RELEASE_JSON" | jq -r '.assets[] | select(.name | test("${{ inputs.mihomo_asset_keyword }}"))')
          MIHOMO_URL=$(echo "$MIHOMO_ASSET_INFO" | jq -r '.browser_download_url')
          MIHOMO_FILENAME=$(echo "$MIHOMO_ASSET_INFO" | jq -r '.name')

          if [ -z "$MIHOMO_URL" ] || [ "$MIHOMO_URL" == "null" ]; then
            echo "::Error::Unable to find latest url for Mihomo (${{ inputs.platform }})."
            exit 1
          fi

          curl -L "$MIHOMO_URL" -o "$MIHOMO_FILENAME"

          if [[ "${{ inputs.mihomo_archive_type }}" == "zip" ]]; then # Windows
            unzip -q "$MIHOMO_FILENAME" -d staging-windows/
            rm "$MIHOMO_FILENAME"
          else # Android
            gunzip "$MIHOMO_FILENAME"
            DECOMPRESSED_FILENAME="${MIHOMO_FILENAME%.gz}"
            mv "$DECOMPRESSED_FILENAME" staging-android/bin/xclash/mihomo
          fi

          MIHOMO_TAG=$(echo "$LATEST_MIHOMO_RELEASE_JSON" | jq -r '.tag_name')
          ZASHBOARD_TAG=$(curl -s https://api.github.com/repos/${{ env.DASHBOARD_REPO }}/releases/latest | jq -r '.tag_name' || echo "latest")
          if [ "$ZASHBOARD_TAG" == "null" ] || [ -z "$ZASHBOARD_TAG" ]; then
            ZASHBOARD_TAG="latest"
          fi

          MIHOMO_VERSION_CLEAN=${MIHOMO_TAG#v}
          ZASHBOARD_VERSION_CLEAN=${ZASHBOARD_TAG#v}
          echo "mihomo_version=${MIHOMO_VERSION_CLEAN}" >> "$GITHUB_OUTPUT"
          echo "zashboard_version=${ZASHBOARD_VERSION_CLEAN}" >> "$GITHUB_OUTPUT"

          FINAL_FILENAME="${{ inputs.platform }}-m${MIHOMO_VERSION_CLEAN}-z${ZASHBOARD_VERSION_CLEAN}.zip"
          echo "file_name=$FINAL_FILENAME" >> "$GITHUB_OUTPUT"

      - name: Create zip package
        run: |
          cd staging-${{ inputs.platform }}
          zip -r ../${{ steps.set_versions.outputs.file_name }} .
          cd ..

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.platform }}-package
          path: ${{ steps.set_versions.outputs.file_name }}
